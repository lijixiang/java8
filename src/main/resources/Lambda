1.什么是Lambda表达式？定义是什么？
2.为什么需要Lambda表达式？有什么优点？
3.如何构造一个Lambda表达式？基本语法结构是什么？

定义：Lambda是创建匿名函数的另一种形式。它比对应的匿名方法更加的简化。
为什么需要Lambda表达式：在JAVA中，我们无法将函数作为一个参数传递给方法，也无法声明返回一个函数的方法。


扩展：
什么是闭包：
有权访问另一个函数作用域内变量的函数都是闭包。
如果在一个内部函数里，对在外部作用域（但不是在全局作用域）的变量进行引用，那么内部函数就被认为是闭包（closure）。
定义在函数内部的函数。

在将函数作为一等公民的语言中，Lambda表达式的类型是函数。但是在JAVA中Lambda表达式是对象，
他们必须依赖于一类特别的对象类型————函数式接口。
在java中，Lambda表达式是对象，是函数式接口的实例，类似于匿名内部类，
这个对象表达的是一种行为，是对行为的抽象。

Lambda表达式基本结构：
(type arg1, type arg2) -> {body}
(param1,param2,param3) -> {body}

函数式接口：
1.如果一个接口只有一个抽象方法，那么该接口就是函数式接口。
2.如果一个接口被@FunctionalInterface修饰，该接口是函数式接口。
3.如果一个接口没有被FunctionalInterface修饰,但是只有一个抽象方法，编译器依旧会将该即可看做函数式接口。

方法引用是Lambda表达式的一种特殊形式（语法糖）。
我们可以把方法引用看做是一个【函数指针】。
方法引用共分为4类：
1. 类名::静态方法名
2. 引用名(对象名)::实例方法名
3. 类名::实例方法名
4. 构造方法引用：类名::new

Stream 流：
流由三部分组成：
1. 源
2. 零个或多个中间操作
3. 终止操作
流操作分类：
1. 惰性求值（中间操作不会求值）
2. 及早求值（终止操作立刻得到结果）

集合关注的是数据与数据存储本身。
流关注的则是对数据的计算。
流与迭代器类似的一点是：流是无法重复使用或消费的。

Collector是一个接口，它是一个可变的汇聚操作，将输入元素累计到一个可变的结果容器当中；它会在所有元素都
处理完毕后，将累积结果转换为一个最终的表示（这是一个可选操作），它支持串行和并行两种方式执行。
Collectors 本身提供了关于Collector 的常见汇聚实现，Collectors 本身是一个工厂。



